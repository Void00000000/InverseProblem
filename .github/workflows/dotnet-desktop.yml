name: Build and Release WPF Project

permissions:
  contents: write        # Разрешение на запись в репозиторий для загрузки активов
  id-token: write        # Разрешение для работы с токеном
  actions: write         # Разрешение для выполнения действий
  issues: write          # Для создания релиза
  pull-requests: write   # Для работы с pull request

on:
  push:
    branches: [ "master" ]  # Workflow запускается при пуше в ветку master.
  workflow_dispatch:        # Позволяет запускать workflow вручную.

jobs:
  build:
    strategy:
      matrix:
        configuration: [Debug, Release]

    runs-on: windows-latest

    env:
      Solution_Name: InverseProblem.sln  # Замените на имя вашего решения.

    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Install .NET Core
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: 8.0.x

    - name: Setup MSBuild.exe
      uses: microsoft/setup-msbuild@v2

    - name: Restore NuGet packages
      run: nuget restore $env:Solution_Name

    - name: Build Solution
      run: msbuild $env:Solution_Name /p:Configuration=$env:Configuration
      env:
        Configuration: ${{ matrix.configuration }}

    # Архивируем артефакты сборки
    - name: Archive Build Artifacts
      run: |
        mkdir BuildArtifacts
        Copy-Item -Path */bin/${{ matrix.configuration }}/* -Destination BuildArtifacts -Recurse
        Compress-Archive -Path BuildArtifacts/* -DestinationPath BuildArtifacts.zip
      shell: pwsh

    # Создаём уникальный тег для релиза
    - name: Generate Release Tag
      id: generate_release_tag
      run: |
        echo "RELEASE_TAG=v${GITHUB_RUN_ID}-$(date +'%Y%m%d%H%M%S')" >> $GITHUB_ENV

    # Проверяем, что переменная окружения была установлена
    - name: Check generated tag
      run: |
        echo "Generated tag: $env:RELEASE_TAG"  # Для PowerShell синтаксис $env:VARIABLE_NAME
      shell: pwsh

    # Создаём релиз с уникальным тегом
    - name: Create GitHub Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ env.RELEASE_TAG }}  # Используем уникальный тег
        release_name: "Build ${{ env.RELEASE_TAG }}"
        draft: false
        prerelease: false

    # Загружаем архив в релиз
    - name: Upload Release Assets
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: BuildArtifacts.zip
        asset_name: BuildArtifacts.zip
        asset_content_type: application/zip
